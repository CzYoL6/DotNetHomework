<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="添加一个flow，调用的命令为 ovs-ofctl add-flow hello &amp;quot;hard_timeout=0 idle_timeout=0 priority=1 table=21 pkt" />
    <meta property="og:description" content="添加一个flow，调用的命令为 ovs-ofctl add-flow hello &amp;quot;hard_timeout=0 idle_timeout=0 priority=1 table=21 pkt" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>Openvswitch原理与代码分析(7): 添加一条流表flow - popsuper1982 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd.min.css?v=FftQhR2MvKTGGXxV0VXlcGGt4XBM0_1XGJmu6kYD9bg" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd-mobile.min.css?v=t8lZrYXGRE8kAD_d-besbRXwkXSQmMprnkoJVYlZl-g" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/popsuper1982/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/popsuper1982/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/popsuper1982/wlwmanifest.xml" />
    <script>
        var currentBlogId = 186637;
        var currentBlogApp = 'popsuper1982';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'iMetro_HD';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2016-09-24 10:31';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/popsuper1982/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/popsuper1982/">刘超的通俗云计算</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/popsuper1982/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/popsuper1982">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/popsuper1982/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/popsuper1982/p/5904329.html">
    <span>Openvswitch原理与代码分析(7): 添加一条流表flow</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<p>添加一个flow，调用的命令为
</p><p>ovs-ofctl add-flow hello "hard_timeout=0 idle_timeout=0 priority=1 table=21 pkt_mark=0x55 tun_id=0x55 actions=mod_nw_dst:192.168.56.101,output:2"
</p><p>这里调用的是调用ovs/utilities/ovs-ofctl.c的命令行工具
</p><p>这个命令行工具支持的所有的命令及处理函数定义如下：
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">const</span>
										<span style="color: rgba(0, 0, 255, 1)">struct</span> ovs_cmdl_command all_commands[] = {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">show</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_show },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">monitor</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [misslen] [invalid_ttl] [watch:[...]]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 3, ofctl_monitor },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">snoop</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_snoop },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-desc</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_desc },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-tables</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_tables },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-table-features</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_table_features },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-table-desc</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_table_desc },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-aggregate</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_aggregate },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">queue-stats</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [port [queue]]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 3, ofctl_queue_stats },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">queue-get-config</span>", "<span style="color: rgba(139, 0, 0, 1)">switch port</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_queue_get_config },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-flow</span>", "<span style="color: rgba(139, 0, 0, 1)">switch flow</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_add_flow },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">switch file</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_add_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">mod-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">switch flow</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_mod_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">del-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [flow]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_del_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">replace-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">switch file</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_replace_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">diff-flows</span>", "<span style="color: rgba(139, 0, 0, 1)">source1 source2</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_diff_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-meter</span>", "<span style="color: rgba(139, 0, 0, 1)">switch meter</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_add_meter },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">mod-meter</span>", "<span style="color: rgba(139, 0, 0, 1)">switch meter</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_mod_meter },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">del-meter</span>", "<span style="color: rgba(139, 0, 0, 1)">switch meter</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_del_meters },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">del-meters</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_del_meters },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-meter</span>", "<span style="color: rgba(139, 0, 0, 1)">switch meter</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_dump_meters },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-meters</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_meters },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">meter-stats</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [meter]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_meter_stats },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">meter-features</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_meter_features },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">packet-out</span>", "<span style="color: rgba(139, 0, 0, 1)">switch in_port actions packet...</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4, INT_MAX, ofctl_packet_out },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-ports</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [port]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_ports },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-ports-desc</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [port]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_ports_desc },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">mod-port</span>", "<span style="color: rgba(139, 0, 0, 1)">switch iface act</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3, 3, ofctl_mod_port },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">mod-table</span>", "<span style="color: rgba(139, 0, 0, 1)">switch mod</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3, 3, ofctl_mod_table },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">get-frags</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_get_frags },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">set-frags</span>", "<span style="color: rgba(139, 0, 0, 1)">switch frag_mode</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_set_frags },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">probe</span>", "<span style="color: rgba(139, 0, 0, 1)">target</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_probe },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">ping</span>", "<span style="color: rgba(139, 0, 0, 1)">target [n]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_ping },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">benchmark</span>", "<span style="color: rgba(139, 0, 0, 1)">target n count</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3, 3, ofctl_benchmark },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">ofp-parse</span>", "<span style="color: rgba(139, 0, 0, 1)">file</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_ofp_parse },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">ofp-parse-pcap</span>", "<span style="color: rgba(139, 0, 0, 1)">pcap</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, INT_MAX, ofctl_ofp_parse_pcap },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-group</span>", "<span style="color: rgba(139, 0, 0, 1)">switch group</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_add_group },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-groups</span>", "<span style="color: rgba(139, 0, 0, 1)">switch file</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_add_groups },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">mod-group</span>", "<span style="color: rgba(139, 0, 0, 1)">switch group</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_mod_group },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">del-groups</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [group]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_del_groups },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">insert-buckets</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [group]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_insert_bucket },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">remove-buckets</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [group]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_remove_bucket },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-groups</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [group]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_group_desc },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-group-stats</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [group]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_dump_group_stats },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-group-features</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_group_features },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">add-tlv-map</span>", "<span style="color: rgba(139, 0, 0, 1)">switch map</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2, 2, ofctl_add_tlv_map },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">del-tlv-map</span>", "<span style="color: rgba(139, 0, 0, 1)">switch [map]</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 2, ofctl_del_tlv_map },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">dump-tlv-map</span>", "<span style="color: rgba(139, 0, 0, 1)">switch</span>",
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1, 1, ofctl_dump_tlv_map },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">help</span>", NULL, 0, INT_MAX, ofctl_help },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">list-commands</span>", NULL, 0, INT_MAX, ofctl_list_commands },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* Undocumented commands for testing. */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-flow</span>", NULL, 1, 1, ofctl_parse_flow },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-flows</span>", NULL, 1, 1, ofctl_parse_flows },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-nx-match</span>", NULL, 0, 0, ofctl_parse_nxm },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-nxm</span>", NULL, 0, 0, ofctl_parse_nxm },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-oxm</span>", NULL, 1, 1, ofctl_parse_oxm },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-actions</span>", NULL, 1, 1, ofctl_parse_actions },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-instructions</span>", NULL, 1, 1, ofctl_parse_instructions },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-ofp10-match</span>", NULL, 0, 0, ofctl_parse_ofp10_match },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-ofp11-match</span>", NULL, 0, 0, ofctl_parse_ofp11_match },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">parse-pcap</span>", NULL, 1, 1, ofctl_parse_pcap },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">check-vlan</span>", NULL, 2, 2, ofctl_check_vlan },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">print-error</span>", NULL, 1, 1, ofctl_print_error },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">encode-error-reply</span>", NULL, 2, 2, ofctl_encode_error_reply },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">ofp-print</span>", NULL, 1, 2, ofctl_ofp_print },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ "<span style="color: rgba(139, 0, 0, 1)">encode-hello</span>", NULL, 1, 1, ofctl_encode_hello },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;{ NULL, NULL, 0, 0, NULL },
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">};</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>根据这个数据结构的定义，"add-flow"调用的函数为
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">void</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">ofctl_add_flow(<span style="color: rgba(0, 0, 255, 1)">struct</span> ovs_cmdl_context *ctx)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;ofctl_flow_mod(ctx-&gt;argc, ctx-&gt;argv, OFPFC_ADD);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>调用ofctl_flow_mod，parse_ofp_flow_mod_str将字符串解析为ofputil_flow_mod fm
</p><p>ofputil_flow_mod包含两个最重要的成员变量：
</p><p>struct match match，所谓match就是一个key。
</p><p>struct ofpact *ofpacts;  /* Series of "struct ofpact"s. */
</p><p>
&nbsp;</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">void</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">ofctl_flow_mod(<span style="color: rgba(0, 0, 255, 1)">int</span> argc, <span style="color: rgba(0, 0, 255, 1)">char</span> *argv[], <span style="color: rgba(0, 0, 255, 1)">uint</span>16_t command)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">if</span> (argc &gt; 2 &amp;&amp; !strcmp(argv[2], "<span style="color: rgba(139, 0, 0, 1)">-</span>")) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofctl_flow_mod_file(argc, argv, command);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;} <span style="color: rgba(0, 0, 255, 1)">else</span> {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> ofputil_flow_mod fm;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">char</span> *error;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">enum</span> ofputil_protocol usable_protocols;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error = parse_ofp_flow_mod_str(&amp;fm, argc &gt; 2 ? argv[2] : "", command,
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;usable_protocols);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">if</span> (error) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ovs_fatal(0, "<span style="color: rgba(139, 0, 0, 1)">%s</span>", error);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofctl_flow_mod__(argv[1], &amp;fm, 1, usable_protocols);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>ofctl_flow_mod__会打开一个指向ovs-vswitchd的socket，将flow match变成openflow的协议，发出去transact_noreply
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">void</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">ofctl_flow_mod__(<span style="color: rgba(0, 0, 255, 1)">const</span>
										<span style="color: rgba(0, 0, 255, 1)">char</span> *remote, <span style="color: rgba(0, 0, 255, 1)">struct</span> ofputil_flow_mod *fms,
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t n_fms, <span style="color: rgba(0, 0, 255, 1)">enum</span> ofputil_protocol usable_protocols)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">enum</span> ofputil_protocol protocol;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> vconn *vconn;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;size_t i;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">if</span> (bundle) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_flow_mod__(remote, fms, n_fms, usable_protocols);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span>;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;protocol = open_vconn_for_flow_mod(remote, &amp;vconn, usable_protocols);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">for</span> (i = 0; i &lt; n_fms; i++) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> ofputil_flow_mod *fm = &amp;fms[i];
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transact_noreply(vconn, ofputil_encode_flow_mod(fm, protocol));
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(CONST_CAST(<span style="color: rgba(0, 0, 255, 1)">struct</span> ofpact *, fm-&gt;ofpacts));
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;vconn_close(vconn);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>Ovs-vswitchd会监听socket，在ovs-vswitchd.c中bridge_run每个bridge会监听消息，ofproto_run监听openflow的调用，connmgr_run网络连接管理，ofconn_run管理socket连接。
</p><p>connmgr_run(p-&gt;connmgr, handle_openflow);会设置当有openflow调用的时候，handle_openflow会被调用。
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">void</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">handle_openflow(<span style="color: rgba(0, 0, 255, 1)">struct</span> ofconn *ofconn, <span style="color: rgba(0, 0, 255, 1)">const</span>
										<span style="color: rgba(0, 0, 255, 1)">struct</span> ofpbuf *ofp_msg)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;OVS_EXCLUDED(ofproto_mutex)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">enum</span> ofperr error = handle_openflow__(ofconn, ofp_msg);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">if</span> (error) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofconn_send_error(ofconn, ofp_msg-&gt;data, error);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;COVERAGE_INC(ofproto_recv_openflow);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>handle_openflow__会做如下的调用：
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">case</span> OFPTYPE_FLOW_MOD:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> handle_flow_mod(ofconn, oh);</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>handle_flow_mod首先将openflow协议解析为fm和ofpacts
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">error = ofputil_decode_flow_mod(&amp;ofm.fm, oh, ofconn_get_protocol(ofconn),
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;ofpacts,
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u16_to_ofp(ofproto-&gt;max_ports),
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ofproto-&gt;n_tables);</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>然后调用static enum ofperr  handle_flow_mod__(struct ofproto *ofproto, struct ofproto_flow_mod *ofm, const struct flow_mod_requester *req)
</p><p>会调用static enum ofperr  ofproto_flow_mod_start(struct ofproto *ofproto, struct ofproto_flow_mod *ofm)  OVS_REQUIRES(ofproto_mutex)
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">enum</span> ofperr
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">ofproto_flow_mod_start(<span style="color: rgba(0, 0, 255, 1)">struct</span> ofproto *ofproto, <span style="color: rgba(0, 0, 255, 1)">struct</span> ofproto_flow_mod *ofm)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;OVS_REQUIRES(ofproto_mutex)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">switch</span> (ofm-&gt;fm.command) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">case</span> OFPFC_ADD:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> add_flow_start(ofproto, ofm);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* , &amp;be-&gt;old_rules.stub[0],
</span></span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 128, 0, 1)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;be-&gt;new_rules.stub[0]); */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">case</span> OFPFC_MODIFY:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> modify_flows_start_loose(ofproto, ofm);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">case</span> OFPFC_MODIFY_STRICT:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> modify_flow_start_strict(ofproto, ofm);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">case</span> OFPFC_DELETE:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> delete_flows_start_loose(ofproto, ofm);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">case</span> OFPFC_DELETE_STRICT:
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> delete_flow_start_strict(ofproto, ofm);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">return</span> OFPERR_OFPFMFC_BAD_COMMAND;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div><p>
&nbsp;</p><p>在函数add_flow_start中，首先cls_rule_init(&amp;cr, &amp;fm-&gt;match, fm-&gt;priority); 将match也即key变成一个cls_rule，cls_rule是一个压缩版本的match，match是一个整个数据结构保存整个package，从L1一直到L4全都有，比较大，如果保存在内存太浪费，cls_rule中有一个minimatch，是用压缩的方式保存match，也即如果match中为0的部分不保存，采取稀疏矩阵的方式。
</p><p>接下来创建一个新的rule，error = replace_rule_create(ofproto, fm, &amp;cr, table - ofproto-&gt;tables, rule, new_rule);
</p><p>最后replace_rule_start(ofproto, ofm-&gt;version, rule, *new_rule, conjs, n_conjs); 将rule替换现在的rule，有则替换，没有则插入。
</p><div><table style="border-collapse: collapse" border="0"><colgroup><col style="width: 863px"></colgroup><tbody valign="top"><tr><td style="padding-left: 11px; padding-right: 11px; border: 0.5pt solid"><ol><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 0, 255, 1)">static</span>
										<span style="color: rgba(0, 0, 255, 1)">void</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">replace_rule_start(<span style="color: rgba(0, 0, 255, 1)">struct</span> ofproto *ofproto, cls_version_t version,
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> rule *old_rule, <span style="color: rgba(0, 0, 255, 1)">struct</span> rule *new_rule,
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> cls_conjunction *conjs, size_t n_conjs)
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">{
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">struct</span> oftable *table = &amp;ofproto-&gt;tables[new_rule-&gt;table_id];
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)">
&nbsp;</div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* 'old_rule' may be either an evicted rule or replaced rule. */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 0, 255, 1)">if</span> (old_rule) {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* Mark the old rule for removal in the next version. */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cls_rule_make_invisible_in_version(&amp;old_rule-&gt;cr, version);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;} <span style="color: rgba(0, 0, 255, 1)">else</span> {
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;table-&gt;n_flows++;
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;}
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* Insert flow to the classifier, so that later flow_mods may relate
</span></span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="color: rgba(0, 128, 0, 1); font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* to it. This is reversible, in case later errors require this to
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 128, 0, 1)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* be reverted. */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;ofproto_rule_insert__(ofproto, new_rule);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: rgba(0, 128, 0, 1)">/* Make the new rule visible for classifier lookups only from the next
</span></span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt"><span style="color: rgba(0, 128, 0, 1)">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* version. */</span>
									</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">&nbsp;&nbsp;&nbsp;&nbsp;classifier_insert(&amp;table-&gt;cls, &amp;new_rule-&gt;cr, version, conjs, n_conjs);
</span></div></li><li><div style="background: rgba(244, 244, 244, 1)"><span style="font-size: 9pt">}</span></div></li></ol></td></tr></tbody></table></div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2016-09-24 22:31</span>&nbsp;
<a href="https://www.cnblogs.com/popsuper1982/">popsuper1982</a>&nbsp;
阅读(<span id="post_view_count">6297</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=5904329" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(5904329);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 186637, cb_blogApp = 'popsuper1982', cb_blogUserGuid = 'cf2394f1-d0e0-e311-8d02-90b11c0b17d6';
    var cb_entryId = 5904329, cb_entryCreatedDate = '2016-09-24 22:31', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 popsuper1982
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjtN4I6rocgMpcvz4n6lwZ3b1uXaxGB2hUIqiifhVLsLPYgaItHkRHAQ-5AneNc177xgPbtUW9ui6iFvNtz0P-F7Li4MlMmGqUX_oa4Ti2bF21heJTIw2AjxUj6Y6Pw4vYc" />
</body>
</html>
