<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="一提mesos，很多人知道双层调度，但是大多数理解都在表面，不然试一下下面五个问题。 问题一：如果有两个framework，一万个节点，按说应该平均分配给两个framework，怎么个分法？一人一台这" />
    <meta property="og:description" content="一提mesos，很多人知道双层调度，但是大多数理解都在表面，不然试一下下面五个问题。 问题一：如果有两个framework，一万个节点，按说应该平均分配给两个framework，怎么个分法？一人一台这" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>号称了解mesos双层调度的你，先来回答下面这五个问题！ - popsuper1982 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd.min.css?v=FftQhR2MvKTGGXxV0VXlcGGt4XBM0_1XGJmu6kYD9bg" />
    
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/imetro_hd/bundle-imetro_hd-mobile.min.css?v=t8lZrYXGRE8kAD_d-besbRXwkXSQmMprnkoJVYlZl-g" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/popsuper1982/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/popsuper1982/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/popsuper1982/wlwmanifest.xml" />
    <script>
        var currentBlogId = 186637;
        var currentBlogApp = 'popsuper1982';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'iMetro_HD';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2018-03-15 01:21';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=2Mic1VLeHXarpdzASbXqFMIMVLEBiWXNO5yiTHUcmhw"></script>
    
    
    
</head>
<body class="has-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/popsuper1982/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/popsuper1982/">刘超的通俗云计算</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/popsuper1982/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/popsuper1982">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/popsuper1982/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/popsuper1982/p/8571270.html">
    <span>号称了解mesos双层调度的你，先来回答下面这五个问题！</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body blogpost-body-html">
<div id="js_content" class="rich_media_content ">
<p>一提mesos，很多人知道双层调度，但是大多数理解都在表面，不然试一下下面五个问题。</p>
<p>&nbsp;</p>
<p><strong>问题一：如果有两个framework，一万个节点，按说应该平均分配给两个framework，怎么个分法？一人一台这样分，还是前五千给一人，后五千给第二个人，还是随机分，随机分怎么个分法？</strong></p>
<p>&nbsp;</p>
<p><strong>问题二：在没有reserved情况下，每个节点是只能得给一个framework，还是可以分给多个framework?</strong></p>
<p>&nbsp;</p>
<p><strong>问题三：如果两个framework的权重比例为1比2，是如何保证资源分配是这个比例？</strong></p>
<p>&nbsp;</p>
<p><strong>问题四：如果两个framework的权重比例为1比2，当第二个用完了三分之二，在第一个没有任务运行的时候，第二个能多用一些么？如何平衡别人不用多用，别人要用保持比例呢？</strong></p>
<p>&nbsp;</p>
<p><strong>问题五：将资源提供给多个framework的时候，是一个节点的资源给第一个framework，第一个framework说我不用，然后再给第二个framework么？</strong></p>
<p>&nbsp;</p>
<p>好了，接下来我们来看Mesos双层调度的基本原理。</p>
<p>&nbsp;</p>
<p><span style="font-size: 20px"><strong>一、入门级理解Mesos双层调度</strong></span></p>
<p>&nbsp;</p>
<p>Mesos的调度过程如图所示：</p>
<p>&nbsp;</p>
<p><img src="https://images2018.cnblogs.com/blog/635909/201803/635909-20180315004129353-1677435086.jpg" alt=""></p>
<p>&nbsp;</p>
<p>Mesos有Framework, Master, Agent, Executor, Task几部分组成。这里面有两层的Scheduler，一层在Master里面，allocator会将资源公平的分给每一个Framework，二层在Framework里面，Framework的scheduler将资源按规则分配给Task。</p>
<p>&nbsp;</p>
<p><span style="font-size: 20px"><strong>二、进阶级理解Mesos双层调度</strong></span></p>
<p>&nbsp;</p>
<p>Mesos采用了DRF（主导资源公平算法 Dominant Resource Fairness），Framework拥有的全部资源类型份额中占最高百分比的就是Framework的主导份额。DRF算法会使用所有已注册的Framework来计算主导份额，以确保每个Framework能接收到其主导资源的公平份额。</p>
<p><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px">&nbsp;</span></p>
<p>举个例子</p>
<p>&nbsp;</p>
<p>考虑一个9CPU，18GBRAM的系统，拥有两个用户，其中用户A运行的任务的需求向量为{1CPU, 4GB}，用户B运行的任务的需求向量为{3CPU，1GB}，用户可以执行尽量多的任务来使用系统的资源。</p>
<p>&nbsp;</p>
<p>在上述方案中，A的每个任务消耗总cpu的1/9和总内存的2/9，所以A的dominant resource是内存；B的每个任务消耗总cpu的1/3和总内存的1/18，所以B的dominant resource为CPU。DRF会均衡用户的dominant shares，执行3个用户A的任务，执行2个用户B的任务。三个用户A的任务总共消耗了{3CPU，12GB}，两个用户B的任务总共消耗了{6CPU，2GB}；在这个分配中，每一个用户的dominant share是相等的，用户A获得了2/3的RAM，而用户B获得了2/3的CPU。</p>
<p>&nbsp;</p>
<p>以上的这个分配可以用如下方式计算出来：x和y分别是用户A和用户B的分配任务的数目，那么用户A消耗了{xCPU，4xGB}，用户B消耗了{3yCPU，yGB}，在图三中用户A和用户B消耗了同等dominant resource；用户A的dominant share为4x/18，用户B的dominant share为3y/9。所以DRF分配可以通过求解以下的优化问题来得到：</p>
<p>&nbsp;</p>
<p>max(x,y) #(Maximize allocations)</p>
<p>subject to</p>
<p>x + 3y &lt;= 9 #(CPU constraint)</p>
<p>4x + y &lt;= 18 #(Memory Constraint)</p>
<p>2x/9 = y/3 #(Equalize dominant shares)</p>
<p>&nbsp;</p>
<p>最后解出x=3以及y=2，因而用户A获得{3CPU，12GB}，B得到{6CPU， 2GB}。</p>
<p>&nbsp;</p>
<p><span style="font-size: 20px"><strong>三、代码级理解Mesos双层调度</strong></span></p>
<p>&nbsp;</p>
<p>首先理解几个概念容易混淆：Quota, Reservation, Role, Weight</p>
<ul class="list-paddingleft-2" style="list-style-type: disc">
<li>
<p>每个Framework可以有Role，既用于权限，也用于资源分配</p>
</li>
<li>
<p>可以给某个role在offerResources的时候回复Offer::Operation::RESERVE,来预订某台slave上面的资源。Reservation是很具体的，具体到哪台机器的多少资源属于哪个Role</p>
</li>
<li>
<p>Quota是每个Role的最小保证量，但是不具体到某个节点，而是在整个集群中保证有这么多就行了。</p>
</li>
<li>
<p>Reserved资源也算在Quota里面。</p>
</li>
<li>
<p>不同的Role之间可以有Weight</p>
</li>
</ul>
<p>&nbsp;</p>
<p>Mesos的代码实现中，不是用原生的DRF，而是使用HierarchicalDR，也即分层的DRF.</p>
<p>&nbsp;</p>
<p>调用了三个排序器Sorter(quotaRoleSorter, roleSorter, frameworkSorter)，对所有的Framework进行排序，哪个先得到资源，哪个后得到资源。</p>
<p>&nbsp;</p>
<p>总的来说分两大步：先保证有quota的role，调用quotaRoleSorter，然后其他的资源没有quota的再分，调用roleSorter。</p>
<p>&nbsp;</p>
<p>对于每一个大步分两个层次排序：一层是按照role排序，第二层是相同的role的不同Framework排序，调用frameworkSorter。</p>
<p>&nbsp;</p>
<p>每一层的排序都是按照计算的share进行排序来先给谁，再给谁。Share的计算就是按照DRF算法。</p>
<p style="margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">&nbsp;</p>
<p>接下来我们具体分析一下这个资源分配的过程。</p>
<p>&nbsp;</p>
<p><strong>1. 生成一个数据结构offerable，用于保存资源分配的结果</strong></p>
<p>&nbsp;</p>
<p>hashmap&lt;FrameworkID, hashmap&lt;SlaveID, Resources&gt;&gt; offerable;</p>
<p>&nbsp;</p>
<p>这是一个MAP，对于每一个Framework，都会有一个资源的MAP，保存的是每个slave上都有哪些资源。</p>
<p>&nbsp;</p>
<p><strong>2. 对于所有的slave打乱默认排序，从而使得资源分配相对均匀</strong></p>
<p>&nbsp;</p>
<p>std::random_shuffle(slaveIds.begin(), slaveIds.end());</p>
<p style="margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">&nbsp;</p>
<p><strong>3. 进行第一次三层循环，对于有quota的Framework进行排序</strong></p>
<p>&nbsp;</p>
<ol class="list-paddingleft-2" style="padding-left: 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">
<li>
<p>foreach&nbsp;(const&nbsp;SlaveID&amp; slaveId, slaveIds) {</p>
</li>
<li>
<p>&nbsp;&nbsp;foreach&nbsp;(const&nbsp;string&amp; role, quotaRoleSorter-&gt;sort()) {</p>
</li>
<li>
<p>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(const&nbsp;string&amp; frameworkId_, frameworkSorters[role]-&gt;sort()) {</p>
</li>
</ol>
<p style="margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">&nbsp;</p>
<p>对于每一个slave，首先对role进行排序，对于每一个role，对于Framework进行排序，排序靠前的Framework优先获得这个slave。</p>
<p>&nbsp;</p>
<p>排序的算法在DRFSorter里面实现，里面有一个函数calculateShare，里面的关键点在于进行了一个循环，对于每一种资源都计算如下的share值：</p>
<p>&nbsp;</p>
<p>share = std::max(share, allocation / _total);</p>
<p>&nbsp;</p>
<p>allocation除以total即一种资源占用的百分比，这里之所以求max，就是找资源占用百分比最高的资源，也即主导资源。</p>
<p>&nbsp;</p>
<p>但是这个share不是直接进行排序，而是share / weights[name]除以权重进行排序。如果权重越大，这个值越小，这个role会排在前面，分配更多的资源。</p>
<p>&nbsp;</p>
<p>排序结束后，对于每一个Framework，将当前slave的资源分配给它。</p>
<p>&nbsp;</p>
<p>Resources available = slaves[slaveId].total - slaves[slaveId].allocated;</p>
<p>&nbsp;</p>
<p>首先查看这个slave的可用资源，也即总资源减去已经分配的资源。</p>
<p>&nbsp;</p>
<p>Resources resources = (available.unreserved() + available.reserved(role)).nonRevocable();</p>
<p style="margin: 10px auto; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">&nbsp;</p>
<p>每个slave上没有预留的资源和已经预留给这个Framework的资源都会给这个Framework，当然如果上面有预留给其他Framework的资源是不会给当前的Framework的。</p>
<p>&nbsp;</p>
<p>offerable[frameworkId][slaveId] += resources;</p>
<p>slaves[slaveId].allocated += resources;</p>
<p>&nbsp;</p>
<p>分配的资源会保存在数据结构offerable中。</p>
<p>&nbsp;</p>
<p><strong>4. 进行第二次三层循环，对于没有quota的Framework进行排序</strong></p>
<p>&nbsp;</p>
<ol class="list-paddingleft-2" style="padding-left: 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">
<li>
<p>foreach&nbsp;(const&nbsp;SlaveID&amp; slaveId, slaveIds) {</p>
</li>
<li>
<p>&nbsp;&nbsp;foreach&nbsp;(const&nbsp;string&amp; role, roleSorter-&gt;sort()) {</p>
</li>
<li>
<p>&nbsp;&nbsp;&nbsp;&nbsp;foreach&nbsp;(const&nbsp;string&amp; frameworkId_,frameworkSorters[role]-&gt;sort()) {</p>
</li>
</ol>
<p>&nbsp;</p>
<p><strong>5. 全部分配结束后，将资源真正提供给各个Framework</strong></p>
<p>&nbsp;</p>
<ol class="list-paddingleft-2" style="padding-left: 40px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px; white-space: normal">
<li>
<p>foreachkey (const&nbsp;FrameworkID&amp; frameworkId, offerable) {</p>
</li>
<li>
<p>&nbsp;&nbsp;offerCallback(frameworkId, offerable[frameworkId]);</p>
</li>
<li>
<p>}</p>
</li>
</ol>
<p>&nbsp;</p>
<p>这里的offerCallback是调用Master::Offer，最终调用Framework的Scheduler的resourceOffers，让Framework进行二次调度。</p>
<p><span style="font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 13.92px"><br>最后，让我们来解答一下这些问题：</span></p>
<p>&nbsp;</p>
<p style="white-space: normal"><strong>问题一：如果有两个framework，一万个节点，按说应该平均分配给两个framework，怎么个分法？一人一台这样分，还是前五千给一人，后五千给第二个人，还是随机分，随机分怎么个分法？</strong></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>答：是随机分，怎么分呢？是将节点随机排序，但是排好序之后，就不再随机分了，而是开始排序，比如随机后的节点队列中的第一个节点分给了第一个framework，等下次循环再排序的时候，第二个framework由于没有拿到资源，排在了第一个framework的前面，于是第二个节点就分配给了第二个framework，然后for循环到第三个节点的时候(这是外层循环)，内层循环对framework排序的时候，第一个framework又排在了第二个前面，于是第三个节点分给了第一个framework。就这样你一个，我一个，实现了平均分配。</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><strong>问题二：在没有reserved情况下，每个节点是只能得给一个framework，还是可以分给多个framework?</strong></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>答：是的，在没有reserved的情况下，一个节点是只给一个framework，如果有reserved的情况下，reserved的那部分会给reserve它的那个framework，其他的部分，还是只能给一个framework，不一定是哪一个，看谁排在前面。</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><strong>问题三：如果两个framework的权重比例为1比2，是如何保证资源分配是这个比例？</strong></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>答：也是通过排序来的，对节点的for循环是外层循环，对framework的排序和循环是内层循环，第一次排序的时候，权重为2的framework排在前面，于是第一个节点是它的，第二次排序的时候，还是权重为2的framework排在前面，于是第二个节点也是它的，第三次排序的时候，权重为1的framework由于从来没拿到过资源，排在了前面，于是第三个节点是它的。就这样你两个，我一个，你两个，我一个，实现了资源按权重分配。</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><strong>问题四：如果两个framework的权重比例为1比2，当第二个用完了三分之二，在第一个没有任务运行的时候，第二个能多用一些么？如何平衡别人不用多用，别人要用保持比例呢？</strong></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>答：能的。如果权重为2的framework用完了三分之二，则每次排序，它都会排在权重为1的但是没有得到资源的framework后面，按说它永远得不到资源。但是算法中会有一个filter机制，当一个节点分给某一个framework之后，如果这个framework不用，退回来，则下次再遇到这个framework的时候，先filter掉，这样另一个framework就有机会得到这个节点了。下次又不会filter掉了。</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><strong>问题五：将资源提供给多个framework的时候，是一个节点的资源给第一个framework，第一个framework说我不用，然后再给第二个framework么？</strong></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>答：不是的。统一运行一遍分配算法，把资源都全部分配好，才统一发送给framework，如果需要再次分配，是下次统一计算的时候了。</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em>欢迎关注微信公众号</em></p>
<p style="white-space: normal">&nbsp;</p>
<p style="white-space: normal"><em><img src="https://images2018.cnblogs.com/blog/635909/201803/635909-20180315012220504-152861446.jpg" alt=""></em></p>








                </div>
</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2018-03-15 01:21</span>&nbsp;
<a href="https://www.cnblogs.com/popsuper1982/">popsuper1982</a>&nbsp;
阅读(<span id="post_view_count">1781</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=8571270" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(8571270);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 186637, cb_blogApp = 'popsuper1982', cb_blogUserGuid = 'cf2394f1-d0e0-e311-8d02-90b11c0b17d6';
    var cb_entryId = 8571270, cb_entryCreatedDate = '2018-03-15 01:21', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 popsuper1982
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjuBODbhe0HZoNyrE8H9Qb27djoNePaxNdy3aQVGxTb4aHHPT1Vw5Lr7Gm2p_w3Vjou9DxdA56Vvu0UhOag_nRoBfHGVKuU--2aOux3tP01FCpC5ppFcD_XFwnC0jHK8IT0" />
</body>
</html>
